// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User model - stores user account information
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String?   // null for OAuth users (Google login)
  name          String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  searchHistory SearchHistory[]
}

// Account model - for OAuth providers (Google, etc.)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@index([userId])
}

// Session model - manages user sessions
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// VerificationToken model - for email verification
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
}

// SearchHistory model - stores song recognition history for each user
model SearchHistory {
  id          String   @id @default(cuid())
  userId      String
  
  // Song information
  title       String
  artists     String   // Stored as JSON string array
  album       String
  releaseDate String?
  coverUrl    String?  // Album cover image URL
  duration    Int?     // Duration in seconds
  label       String?  // Record label
  
  // ACRCloud specific data (optional, for reference)
  acrCloudId  String?  // ACRCloud track ID
  
  searchedAt  DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, searchedAt(sort: Desc)])
}