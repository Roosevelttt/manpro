// This is your Prisma schema file.
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Model for users, managed by NextAuth.js
model User {
  id            String @id @default(cuid())
  name          String?
  email         String? @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  history       RecognitionHistory[] // A user can have many recognition history entries
}

// Model for storing unique songs to avoid duplicates
model Song {
  id          String @id @default(cuid())
  title       String
  artist      String
  album       String
  acrcloud_id String @unique // The unique ID from the ACRCloud API
  history     RecognitionHistory[]
}

// Model to link a User to a Song they recognized
model RecognitionHistory {
  id           String   @id @default(cuid())
  recognizedAt DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  song         Song     @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId       String
}


// These models are required by NextAuth.js for its Prisma Adapter
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}